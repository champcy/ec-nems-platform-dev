<?php
/**
 * @file
 * Code for the NEMS core settings feature.
 */

include_once 'nems_core.features.inc';

define("NEMS_CORE_BLOCK_ACCESS_ROLE", 6);
const NEMS_CORE_BLOCK_ACCESS_PERMISSIONS = array(
  'config',
  'config_body',
  'config_desc',
  'config_lang',
  'config_page_visibility',
  'config_region',
  'config_role_visibility',
  'config_title',
  'config_type_visibility',
  'config_user_visibility',
  'delete',
  'disable',
  'enable',
  'move',
  'view',
);

/**
 * Implements hook_nexteuropa_token_token_handlers().
 */
function nems_core_nexteuropa_token_token_handlers() {
  return array(
    'handler_name' => '\Drupal\nems_core\FileUrlTokenHandler',
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function nems_core_form_media_wysiwyg_format_form_alter(&$form, &$form_state, $form_id) {
  // Set preview for simple link.
  if (isset($form_state['values']) && $form_state['values']['format'] == 'simple_link') {
    $form['preview']['#theme'] = 'simple_link';
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function nems_core_entity_info_alter(&$entity_info) {
  $entity_info['file']['view modes']['simple_link'] = array(
    'label' => t('Simple link to file'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_media_wysiwyg_token_to_markup_alter().
 */
function nems_core_media_wysiwyg_token_to_markup_alter(&$element, $tag_info, $settings) {
  if ($tag_info['view_mode'] == 'simple_link') {
    $element['content'] = $element['content']['file'];
    $element['content']['#theme'] = 'simple_link';
  }
}

/**
 * Implements hook_theme().
 */
function nems_core_theme($existing, $type, $theme, $path) {
  return array(
    'simple_link' => array(
      'variables' => array('file' => NULL),
    ),
  );
}

/**
 * theme_simple_link().
 */
function theme_simple_link($variables) {
  $file = $variables['file'];
  $url = file_create_url($file->uri);
  $options = array(
    'attributes' => array(
      'type' => $file->filemime . '; length=' . $file->filesize,
    ),
  );

  // Use the description as the link text if available.
  if (empty($file->description)) {
    $link_text = $file->filename;
  }
  else {
    $link_text = $file->description;
    $options['attributes']['title'] = check_plain($file->filename);
  }

  return l($link_text, $url, $options);
}

/**
 * Implements hook_permission().
 */
function nems_core_permission() {
  return array(
    'access nems menu' => array(
      'title' => t('NEMS Menu access'),
      'description' => t('Restrict the access to several menu items on the NEMS template.'),
    ),
    'access europa search' => array(
      'title' => t('Europa Search access'),
      'description' => t('Access the configuration of the Europa Search tool.'),
    ),

  );
}

/**
 * Implements hook_menu_alter().
 */
function nems_core_menu_alter(&$items) {
  // List of menu items we will restrict access to.
  $path_list = array(
    'admin/config/content/ckeditor_tabber',
    'admin/config/administration/admin_menu',
    'admin/config/content/title',
    'admin/config/content/entityconnect',
    'admin/config/content/version_management/settings',
    'admin/config/media/file-system',
    'admin/config/media/file-system/transliteration',
    'admin/config/content/node_export',
    'admin/config/date/date_popup',
    'admin/config/development/strongarm',
    'admin/config/people/accounts',
    'admin/config/development/jquery_update',
    'admin/config/development/generate/user',
    'admin/config/menu_token',
    'admin/config/media/media_node',
    'admin/config/media/image-toolkit',
    'admin/config/media/colorbox',
    'admin/config/media/file-settings',
    'admin/config/regional/i18n',
    'admin/config/regional/language/configure',
    'admin/config/search/path/settings',
    'admin/config/security/settings',
    'admin/config/system/nexteuropa-tokens',
    'admin/config/system/cron',
    'admin/config/user-interface/chosen',
    'admin/people/create',
    'admin/structure/block/add',
    'admin/config/regional/language/admin_language',
    'admin/config/regional/language/configure',
  );

  foreach ($path_list as $path) {
    if (isset($items[$path])) {
      // Add custom user access.
      $items[$path]['access callback'] = '_nems_core_user_access';
      $required_permissions = array();
      // Pass original permission and custom one as arguments.
      if (isset($items[$path]['access arguments'][0])) {
        if (is_array($items[$path]['access arguments'][0])) {
          $required_permissions = $items[$path]['access arguments'][0];
        }
        else {
          $required_permissions[] = $items[$path]['access arguments'][0];
        }
      }
      $required_permissions[] = 'access nems menu';
      $items[$path]['access arguments'][0] = $required_permissions;
    }
  }

  // Give access to menu block to users that can administer blocks.
  if (isset($items['admin/structure/block/add-menu-block'])) {
    $items['admin/structure/block/add-menu-block']['access callback'] = '_nems_core_menu_block_access';
  }

  // Restrict access to europa search.
  if (isset($items['admin/config/search/europa_search'])) {
    $items['admin/config/search/europa_search']['access arguments'][0] = 'access europa search';
  }
  // Add restrictions to access bartik and seven.
  if (isset($items['admin/structure/block/list/bartik'])) {
    $items['admin/structure/block/list/bartik']['access callback'] = '_nems_core_block_themes_access';
  }
  if (isset($items['admin/structure/block/list/seven'])) {
    $items['admin/structure/block/list/seven']['access callback'] = '_nems_core_block_themes_access';
  }

  // Add restrictions to tb-megamenu.
  if (isset($items['admin/structure/tb-megamenu'])) {
    $items['admin/structure/tb-megamenu/%tb_megamenu_menu_name']['access callback'] = '_nems_core_tb_megamenu_access';
    $items['admin/structure/tb-megamenu/%tb_megamenu_menu_name']['access arguments'] = array(3);
    $items['admin/structure/tb-megamenu/%tb_megamenu_menu_name/config']['access callback'] = '_nems_core_tb_megamenu_access';
    $items['admin/structure/tb-megamenu/%tb_megamenu_menu_name/config']['access arguments'] = array(3);
  }

  // Restrict access to administrator users.
  $items['user/%user/edit']['access callback'] = '_nems_core_user_edit_access';
  $items['user/%user/cancel']['access callback'] = '_nems_core_user_edit_access';
}

/**
 * Implements hook_menu().
 */
function nems_core_menu() {
  // Admin_menu does not render menu items allowed by menu_admin_per_menu,
  // So as a work around I add them back like this.
  $menus = menu_get_menus();
  $webmaster_menus = array('menu-breadcrumb-menu', 'main-menu', 'menu-service-tools');

  foreach ($webmaster_menus as $mid) {
    $menu = menu_load($mid);
    $items['admin/structure/menu/manage/' . $mid . '/list'] = array(
      'title' => $menus[$mid],
      'page callback' => 'drupal_get_form',
      'page arguments' => array('menu_overview_form', $menu),
      'access callback' => '_nems_core_menu_item_access',
      'access arguments' => array($menu),
      'file' => 'menu.admin.inc',
      'file path' => drupal_get_path('module', 'menu'),
    );
  }

  return $items;
}

/**
 * Implements hook_module_implements_alter().
 */
function nems_core_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    $group = $implementations['nems_core'];
    unset($implementations['nems_core']);
    $implementations['nems_core'] = $group;
  }
}

/**
 * Implements hook_form_alter().
 */
function nems_core_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['type']) && isset($form['type']['#value']) && $form_id == $form['type']['#value'] . '_node_form') {
    if (isset($form['language'])) {
      // Ensure correct language list (no disabled languages should be present).
      $languages = i18n_node_language_list($form['#node']);
      $form['language']['#options'] = $languages;
    }
  }
}

/**
 * Determine whether the user has permission to use menu_block module.
 *
 * @param object $account
 *   Object containing account data.
 *
 * @return bool
 *   Access rights edit result.
 */
function _nems_core_menu_block_access($account = NULL) {
  return user_access('administer blocks', $account);
}

/**
 * Determine whether the user has permission to see these items.
 *
 * @param array $menu
 *   The menu item viwed.
 * @return bool
 *   The result.
 */
function _nems_core_menu_item_access($menu = NULL) {
  global $user;

  if (!in_array('webmaster', $user->roles)) {
    return FALSE;
  }

  return _menu_admin_per_menu_menu_access($menu);
}

/**
 * Implements hook_node_access().
 */
function nems_core_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;

  if (in_array($type, array('page', 'article')) && in_array('webmaster', $account->roles)) {
    return NODE_ACCESS_DENY;
  }

  return NODE_ACCESS_IGNORE;
}

/**
 * Add access restrictions to a block.
 *
 * @param object $module
 *   Module that built the block.
 * @param object $delta
 *   Delta identifying the block.
 * @param bool $delete
 *   Flag to mark a deletion processs.
 */
function _nems_core_restrict_block_access($module, $delta, $delete = FALSE) {
  if (!$delete) {
    foreach (NEMS_CORE_BLOCK_ACCESS_PERMISSIONS as $permission) {
      db_insert('block_access_roles')
        ->fields(array(
          'module' => $module,
          'delta' => $delta,
          'rid' => NEMS_CORE_BLOCK_ACCESS_ROLE,
          'permission' => $permission,
        ))
        ->execute();
    }
  }
  else {
    foreach (NEMS_CORE_BLOCK_ACCESS_PERMISSIONS as $permission) {
      db_delete('block_access_roles')
        ->condition('module', $module)
        ->condition('delta', $delta)
        ->condition('rid', NEMS_CORE_BLOCK_ACCESS_ROLE)
        ->condition('permission', $permission)
        ->execute();
    }
  }
}

/**
 * Implements hook_features_api_alter().
 */
function nems_core_features_api_alter(&$components) {
  // We force block_access components to be processed
  // after roles have been added.
  if (isset($components['block_access'])) {
    $setting = $components['block_access'];
    unset($components['block_access']);
    $components['block_access'] = $setting;
  }
}

/**
 * Implements hook_block_view_alter().
 *
 * We hide bean blocks if blockreference is empty.
 */
function nems_core_block_view_alter(&$data, $block) {
  // Check if the block is a bean.
  if ($block->module == 'bean') {
    reset($data['content']['bean']);
    $bean = current($data['content']['bean']);
    // Check the bundle and look for the reference.
    if ($bean['#bundle'] == 'list_block' && !isset($bean['field_nems_block_reference'])) {
      $data['subject'] = '';
      $data['content'] = '';
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hide tb-megamenu items for webmasters.
 */
function nems_core_form_tb_megamenu_admin_settings_alter(&$form, &$form_state, $form_id) {
  $perm_menus = _menu_admin_per_menu_get_perm_menus();
  foreach ($form as $name => $item) {
    if (drupal_substr($name, 0, drupal_strlen('#')) !== '#') {
      if (!isset($perm_menus[$name])) {
        unset($form[$name]);
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Remove tags from dispaly mode of all file entities.
 */
function nems_core_entity_view_alter(&$build, $type) {
  if ($type == 'file' && isset($build['field_tags'])) {
    unset($build['field_tags']);
    unset($build['field_folder']);
  }
}

/**
 * Custom access function to restrict the access to bartik and seven.
 *
 * @param object $theme
 *   Object containing theme data.
 *
 * @return bool
 *   Access rights edit result.
 */
function _nems_core_block_themes_access($theme) {

  if ($theme->name == 'bartik' || $theme->name == 'seven') {
    global $user;
    if (in_array('administrator', array_values($user->roles))) {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
  else {
    return _block_themes_access($theme);
  }
}

/**
 * Restrict access to administrator and superuser accounts.
 *
 * @param object $account
 *   Object containing account data.
 *
 * @return bool
 *   Access rights edit result.
 */
function _nems_core_user_edit_access($account) {
  global $user;
  // Restrict access to user 1 account.
  if ($account->uid == 1 and $user->uid != 1) {
    return FALSE;
  }
  if (in_array('administrator', $account->roles) && !in_array('administrator', $user->roles)) {
    return FALSE;
  }
  return user_edit_access($account);
}

/**
 * Access callback for tb-megamenu.
 *
 * @param string $menu
 *   Menu name.
 *
 * @return bool
 *   Access level to a tb_megamenu.
 */
function _nems_core_tb_megamenu_access($menu) {
  if (user_access('administer menu')) {
    return TRUE;
  }
  $perm_menus = _menu_admin_per_menu_get_perm_menus();
  return isset($perm_menus[array_shift($menu)]);
}

/**
 * Custom function to check multiple permissions.
 *
 * @param array $permissions
 *   Array containing a set of permission names.
 * @param object $account
 *   Account to check access level. Uses current user if not defined.
 *
 * @return bool
 *   Access level for the specified permissions.
 */
function _nems_core_user_access($permissions, $account = NULL) {
  $access = TRUE;
  global $user;

  if (!isset($account)) {
    $account = $user;
  }
  // User #1 has all privileges:
  if ($account->uid == 1) {
    return TRUE;
  }

  // To reduce the number of SQL queries, we cache the user's permissions
  // in a static variable.
  // Use the advanced drupal_static() pattern, since this is called very often.
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['perm'] = &drupal_static(__FUNCTION__);
  }
  $perm = &$drupal_static_fast['perm'];
  if (!isset($perm[$account->uid])) {
    $role_permissions = user_role_permissions($account->roles);

    $perms = array();
    foreach ($role_permissions as $one_role) {
      $perms += $one_role;
    }
    $perm[$account->uid] = $perms;
  }
  foreach ($permissions as $string) {
    if (!isset($perm[$account->uid][$string])) {
      $access = FALSE;
    }
  }
  return $access;
}

/**
 * Implements hook_post_features_revert().
 */
function nems_core_post_features_revert($component) {
  if ($component == 'variable') {
    // Remove the media_browser_plus taxonomy reference from file displays.
    $bundles = array('audio', 'document', 'image', 'video');

    foreach ($bundles as $bundle) {
      $instance_info = field_info_instance('file', 'field_folder', $bundle);

      if (!empty($instance_info)) {
        $instance_info['display']['default']['type'] = 'hidden';
        field_update_instance($instance_info);
      }
    }

    // Enable multiple edit for MBP.
    module_enable(array('media_bulk_upload'));

    // Alter Media browser settings (swap old tabs with MBP tabs).
    // We update from here to avoid feature conflicts with ec_embedded_video.
    $value = array(
      0 => 'upload',
      1 => 'media_browser_plus--media_browser_thumbnails',
      2 => 'media_browser_plus--media_browser_my_files',
      3 => 'media_internet',
    );

    variable_set('media_wysiwyg_wysiwyg_browser_plugins', $value);

    // Disable pathologic, see #NEXTEUROPA-14593.
    module_disable(array('pathologic'));

    // In NEMS these autoregistered users are BLOCKED #NEXTEUROPA-14116.
    variable_set('ecas_account_option', 0);
  }
}

/**
 * Implements hook_views_default_views_alter().
 */
function nems_core_views_default_views_alter(&$views) {
  if (isset($views['media_browser_plus'])) {
    // NEMS defines the MBP tabs as default, so we set the correct titles here.
    $views['media_browser_plus']->display['media_browser_thumbnails']->display_options['title'] = t('Library');
    $views['media_browser_plus']->display['media_browser_my_files']->display_options['title'] = t('My files');
  }
}
